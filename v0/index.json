[{"uri":"https://docs.siridb-enodo.com/v0/","title":"","tags":[],"description":"","content":"Welcome to the SiriDB Enodo docs For source code please visit the SiriDB Enodo Hub repo.\nAbout SiriDB Enodo Enodo is a time series data analysis platform made for SiriDB. Combining the power of storing and querying time series data from SiriDB and the analyzing power of Enodo, we can create better understanding of the data that we collect and store. So we can learn from the past and create forecasts for the future.\nThe Enodo platform is build in modules to create scalability. The Hub will control and organize the data that we have collected and the questions we want to ask about the data. The Worker will perform the analyzing jobs and the Listener will stay on top of the latest data points. Together these components will make sure we can monitor the data in realtime, adjust our expectations for the future and watch for sudden unexpected changes in the data that we collect. Listener\nThe Enodo listener listens to a pipe socket with SiriDB server. The listener only keeps track of series that are registered via the hub. It sums up the added data points to each of these series and it sends periodically an update to the hub, or when a serie is monitored in realtime, it will notify the Hub immediately. The listener is separated from the Enodo hub, so that it can be placed close to the SiriDB server to gain local access to the pipe socket. Worker\nNote : A worker uses significant CPU and thus should be placed on a machine that has low CPU usage.\nThe Enodo worker executes fitting and forecasting models/algorithms. It can create different models like MA/RA/ARIMA, but also use Prophet, for analyzing series, training models with new data, flagging anomalies and calculate forecasts for a certain series. A worker can implement multiple models. This can be different per worker version. The implemented models should be communicated to the hub during the handshake. Hub\nThe Enodo hub communicates and guides both the listener and the worker. It tells the listener to which series it needs to pay attention to, and it tells the worker which series should be analysed. Clients can connect to the hub for receiving updates, and polling for data. Also a client can use the hub to alter the data about which series should be watched.\n"},{"uri":"https://docs.siridb-enodo.com/v0/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://docs.siridb-enodo.com/v0/getting_started/","title":"Getting started","tags":[],"description":"","content":"Deployment There are just a few strict rules to take into account when deploying the enodo platform. The Listener should be placed right next to you siridb instance, so it can listen to incoming data via a pipe. The worker can be deployed anywhere, as long as there is enough CPU resource to be used by the worker. The Hub should be deployed in such a way that it both the listener and the worker can connect to it via socket connections.\nDocker TODO\nLocalhost Follow these steps for all the Enodo components:\n Install dependencies via pip3 install -r requirements.txt Setup a .conf file file python3 main.py --create_config There will be made a default.conf next to the main.py. Fill in the default.conf file Call python3 main.py --config=default.conf to start the hub. You can also setup the config by environment variables. These names are identical to those in the default.conf file, except all uppercase.  Follow these additional steps for the Enodo Hub:\nFill in settings.enodo file, which you can find in the data folder by the path set in the conf file with key: enodo_base_save_path Restart Hub to use new settings or fill them in via the GUI  Enodo Hub API The Enodo Hub has two API\u0026rsquo;s from which you can do CRUD actions and subscribe to data changes. A REST API and a socket.io API.\nREST API    Resource path CRUD     /api/series CR   /api/series/{series_name} RD   /api/enodo/event/output CR   api/enodo/event/output/{output_id} D    Examples Create Series\ncall {hostname}/api/series (POST)\n{ \u0026quot;name\u0026quot;: \u0026quot;series_name_in_siridb\u0026quot;, \u0026quot;config\u0026quot;: { \u0026quot;min_data_points\u0026quot;:2, \u0026quot;job_config\u0026quot;:{ \u0026quot;job_base_analysis\u0026quot;: { \u0026quot;activated\u0026quot;: true, \u0026quot;model\u0026quot;: \u0026quot;prophet\u0026quot;, \u0026quot;job_schedule\u0026quot;: 200, \u0026quot;model_params\u0026quot;:{ \u0026quot;points_since\u0026quot;:1563723900, \u0026quot;sensitivity\u0026quot;:2, \u0026quot;static_rules\u0026quot;:{ \u0026quot;min\u0026quot;:800, \u0026quot;max\u0026quot;:1000, \u0026quot;last_n_points\u0026quot;:100 } } }, \u0026quot;job_forecast\u0026quot;: { \u0026quot;activated\u0026quot;: true, \u0026quot;model\u0026quot;: \u0026quot;ffe\u0026quot;, \u0026quot;job_schedule\u0026quot;: 200, \u0026quot;model_params\u0026quot;:{ \u0026quot;points_since\u0026quot;:1563723900, \u0026quot;sensitivity\u0026quot;:2, \u0026quot;static_rules\u0026quot;:{ \u0026quot;min\u0026quot;:800, \u0026quot;max\u0026quot;:1000, \u0026quot;last_n_points\u0026quot;:100 } } } } } } Create event output stream\ncall {hostname}/api/enodo/event/output (POST)\n{ \u0026quot;output_type\u0026quot;: 1, \u0026quot;data\u0026quot;: { \u0026quot;for_severities\u0026quot;: [\u0026quot;warning\u0026quot;, \u0026quot;error\u0026quot;], \u0026quot;url\u0026quot;: \u0026quot;url_to_endpoint\u0026quot;, \u0026quot;headers\u0026quot;: { \u0026quot;authorization\u0026quot;: \u0026quot;Basic abcdefghijklmnopqrstuvwxyz\u0026quot; }, \u0026quot;payload\u0026quot;: \u0026quot;{\\n \\\u0026quot;title\\\u0026quot;: \\\u0026quot;{{event.title}}\\\u0026quot;,\\n \\\u0026quot;body\\\u0026quot;: \\\u0026quot;{{event.message}}\\\u0026quot;,\\n \\\u0026quot;dateTime\\\u0026quot;: {{event.ts}},\\n \\\u0026quot;severity\\\u0026quot;: \\\u0026quot;{{event.severity}}\\\u0026quot;\\n}\u0026quot; } } Socket.IO Api (WebSockets) When sending payload in a request, use the data structure same as in the REST API calls, except the data will be wrapped in an object : {\u0026quot;data\u0026quot;: ...}.\nGet series event: /api/series/create\nGet series Details event: /api/series/details\nCreate series event: /api/series/create\nDelete series event: /api/series/delete\nGet all event output stream event: /api/event/output\nCreate event output stream event: /api/event/output/create\nDelete event output stream event: /api/event/output/delete\nAnalysis Enodo support the following analysis jobs:\n Base series analysis for series characteristics Forecasting Anomaly detection Statis rules  Each analysis job is send by the Hub to a available worker. The worker uses the series config to determine which model/algorithm to use for executing the job. Different workers can have different models implemented, which they let the Hub know while connecting on startup.\n1. Base series analysis This job is meant to gather series characteristics and simple data such as if the series has a trend of detectable seasonality in it.\n2. Forecasting The forecasting job results in a forecast of the series. The worker will use a requested model to forecast the series into the future, using the data we already have of this series. The forecast can differ between models and config. You can forecast just 5 hours into the future, or 5 days and so one. Depending on the amount of data and the model used for this job, it can be a very extensive or simple forecast.\n3. Anomaly detection Using a requested model/algorithm the worker will try to check if in the last n points, there were any anomalies within the data. The more suffisticated the model or algorithm, the more precise the worker can be.\n4. Static rules For simple series, a static threshold will do. For now Enodo support a min and max threshold.\nAnalysis models Models can be installed within the worker\nanalyser ├── model ├── __init__.py ├── models │ ├── base.py │ ├── ffe │ │ ├── __init__.py │ │ ├── bootstrap.py │ │ └── ffe.py │ └── prophet │ ├── __init__.py │ ├── bootstrap.py │ └── prophet.py └── util.py Within the model folder you will find:\n util.py holding the load function, to load all model classes models folder holding all installed analyser models  When creating a new model, make sure that the modelclass itself extends the basemodel class in base.py, and that the bootstrap.py file will have a function get_model_class which will return the model class itself (not an instance)\n"},{"uri":"https://docs.siridb-enodo.com/v0/tags/","title":"Tags","tags":[],"description":"","content":""}]