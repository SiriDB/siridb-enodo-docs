[{"uri":"https://docs.siridb-enodo.com/v0/","title":"","tags":[],"description":"","content":"Welcome to the SiriDB Enodo docs For source code please visit the SiriDB Enodo Hub repo.\nAbout SiriDB Enodo Enodo is a time series data analysis platform made for SiriDB. Combining the power of storing and querying time series data from SiriDB and the analyzing power of Enodo, we can create better understanding of the data that we collect and store. So we can learn from the past and create forecasts for the future.\nThe Enodo platform is build in modules to create scalability. The Hub will control and organize the data that we have collected and the questions we want to ask about the data. The Worker will perform the analyzing jobs and the Listener will stay on top of the latest data points. Together these components will make sure we can monitor the data in realtime, adjust our expectations for the future and watch for sudden unexpected changes in the data that we collect. Listener\nThe Enodo listener listens to a pipe socket with SiriDB server. The listener only keeps track of series that are registered via the hub. It sums up the added data points to each of these series and it sends periodically an update to the hub, or when a serie is monitored in realtime, it will notify the Hub immediately. The listener is separated from the Enodo hub, so that it can be placed close to the SiriDB server to gain local access to the pipe socket. Worker\nNote : A worker uses significant CPU and thus should be placed on a machine that has low CPU usage.\nThe Enodo worker executes fitting and forecasting models/algorithms. It can create different models like MA/RA/ARIMA, but also use Prophet, for analyzing series, training models with new data, flagging anomalies and calculate forecasts for a certain series. A worker can implement multiple models. This can be different per worker version. The implemented models should be communicated to the hub during the handshake. Hub\nThe Enodo hub communicates and guides both the listener and the worker. It tells the listener to which series it needs to pay attention to, and it tells the worker which series should be analysed. Clients can connect to the hub for receiving updates, and polling for data. Also a client can use the hub to alter the data about which series should be watched.\n"},{"uri":"https://docs.siridb-enodo.com/v0/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://docs.siridb-enodo.com/v0/getting_started/","title":"Getting started","tags":[],"description":"","content":"Worker pools The hub divides workers into pools. Within a pool, workers are also divided by their job_type_id. So when running a job, the hub needs to know in which pool and for which job type. For each combination of pool_id and job_type_id a lookup/scaling table is generated based on the number of workers available for that combination.\nEnodo internal vocabulary  pool_id: the index of a pool (0,1,2\u0026hellip;.) job_type_id: the id that corresponds with a job type (forecast, anomaly detection..) pool_idx: the bitshifted combination between pool_id and job_type_id (see gen_pool_idx func in hub) worker_id: the index of a worker within a pool/job_type combo worker_idx: the bitshifted combination between pool_id, job_type_id and worker_id. (see gen_worker_idx func in hub) Makes it easy to use one int value for a quick lookup of a certain worker. Also you are able to determine the pool_id and job_type_id from this idx  REST API Auth is basic auth. Default username and password are enodo\nRun job for series You can request enodo to run a job. You can give an output id (responseOutputID) which will be used to send the result to\ncurl --request POST \\ --url 'http://localhost/api/series/forecast_test2/run?byName=1\u0026amp;poolID=0\u0026amp;responseOutputID=1017' \\ --header 'Authorization: Basic qweqweqw=' \\ --header 'Content-Type: application/json' \\ --data '{ \u0026quot;meta\u0026quot;: { \u0026quot;assetID\u0026quot;: \u0026quot;1234abcd\u0026quot; }, \u0026quot;config\u0026quot;: { \u0026quot;config_name\u0026quot;: \u0026quot;forecast\u0026quot;, \u0026quot;job_type_id\u0026quot;: 1, \u0026quot;module\u0026quot;: \u0026quot;prophet@0.2.0-beta0.1.2\u0026quot;, \u0026quot;max_n_points\u0026quot;: 20000, \u0026quot;module_params\u0026quot;: { \u0026quot;periods\u0026quot;: 200, \u0026quot;smooth\u0026quot;: true, \u0026quot;forecast_freq\u0026quot;: \u0026quot;30T\u0026quot;, \u0026quot;changepoint_range\u0026quot;: 0.95, \u0026quot;uncertainty_samples\u0026quot;: 1000 } } }'  job_type_id is the job type, 1 equals a forecast job. max_n_points is the amount of historic points we will use to create our model  In model params:\n periods is the amount of periods the forecast needs to be. So the range of the forecast will be periods * forecast_freq smooth determines if we apply smoothing to our historic data. When applied, we will reduce the time needed to fit our model changepoint_range will determin how much of our historic data is used to determine changepoints. When we have a small dataset, it is important that this value is as high as possible (range: 0.0 - 1.0) uncertainty_samples Will determine the precision of our yhat_lower and yhat_upper (0 - 1000) the more closer to 1000 the more accurate it will be, but this adds a bit of extra time to our fitting)  Get Outputs for events Get active outputs for events\ncurl --request GET \\ --url http://localhost/api/enodo/output/event \\ --header 'Authorization: Basic qweqweqw=' Get outputs for results Get active output for results\ncurl --request GET \\ --url http://localhost/api/enodo/output/result \\ --header 'Authorization: Basic qweqweqw=' Delete an output Delete an output by its type (event or result) and id\ncurl --request DELETE \\ --url http://localhost/api/enodo/output/{type}/{id} \\ --header 'Authorization: Basic qweqweqw=' Add output Add an event or result output\ncurl --request POST \\ --url http://localhost/api/enodo/output/result \\ --header 'Authorization: Basic qweqweqw=' \\ --header 'Content-Type: application/json' \\ --data '{ \u0026quot;url\u0026quot;: \u0026quot;http://hub:8720/enodo\u0026quot;, \u0026quot;params\u0026quot;: { \u0026quot;assetId\u0026quot;: \u0026quot;${request.meta.assetId}\u0026quot; }, \u0026quot;headers\u0026quot;: { \u0026quot;Authorization\u0026quot;: \u0026quot;Basic 2312\u0026quot;, \u0026quot;Content-Type\u0026quot;: \u0026quot;application/json\u0026quot; }, \u0026quot;payload\u0026quot;: \u0026quot;{${?response.error,error}${?response.meta.accuracy,accuracy}\\\u0026quot;forecast\\\u0026quot;: ${response.result},\\\u0026quot;name\\\u0026quot;: \\\u0026quot;${response.series_name}\\\u0026quot;}\u0026quot; }' The params and payload fields can have string templating syntax in them, but also added extra\u0026rsquo;s such as ? for optionals and {original_path, new_property_name}\nGet worker stats Get stats about workers in a pool\ncurl --request GET \\ --url http://localhost/api/worker/stats/{pool_id} \\ --header 'Authorization: Basic qweqweqw=' Get worker state for a series Query the responsible worker for the current state the worker has for a specified series\ncurl --request GET \\ --url http://localhost/api/series/{series_name}/state/{pool_id}/{job_type_id} \\ --header 'Authorization: Basic qweqweqw=' Get workers Get works the hub knowns\ncurl --request GET \\ --url http://localhost/api/worker/{pool_id} \\ --header 'Authorization: Basic qweqweqw=' Delete worker Delete a worker. The hub will always delete the latest worker in the given pool/job_type combo.\ncurl --request DELETE \\ --url http://localhost/api/worker/{pool_id}/{job_type_id} \\ --header 'Authorization: Basic qweqweqw=' \\ Add worker Add a worker to a given pool_id for a given job_type_id\ncurl --request POST \\ --url http://localhost/api/worker/{pool_id} \\ --header 'Authorization: Basic qweqweqw=' \\ --header 'Content-Type: application/json' \\ --data '{ \u0026quot;hostname\u0026quot;: \u0026quot;localhost\u0026quot;, \u0026quot;port\u0026quot;: 9105, \u0026quot;worker_config\u0026quot;: { \u0026quot;job_type_id\u0026quot;: 1, \u0026quot;config\u0026quot;: {} } }' Get hub status Get hub version\ncurl --request GET \\ --url http://localhost:8081/api/enodo/status \\ --header 'Authorization: Basic qweqweqw=' "},{"uri":"https://docs.siridb-enodo.com/v0/tags/","title":"Tags","tags":[],"description":"","content":""}]